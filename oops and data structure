// Inheritance
/*import java.util.*;
class Animal
{
    void eat()
    {
        System.out.println("The animals eat the food");
    }
    void sleep()
    {
        System.out.println("The animal sleep deeply");
    }
}
class Dog extends Animal
{
    void bark()
    {
        System.out.println("The Dog is barking");
    }
}
class Puppy extends Animal
{
    void color()
    {
        System.out.println("The puppy is White color");
    }
}
public class Main 
{
    public static void main(String[] args)
    {
        //Puppy obj = new Puppy();
        Dog obj = new Dog();
        obj.eat();
        obj.sleep();
        obj.bark();
        //obj.color();
    }
}

// Mutiple Inheritance

import java.util.*;
class Event
{
    void start()
    {
        System.out.println("Strat the event");
    }
}
class  Sports 
{
    void play()
    {
        System.out.println("Play the sports");
    }
}
class Hockey extends Sports
{
    void show()
    {
        System.out.println("Show the Hockey game");
    }
}
class Main 
{
    public static void main(String[] args)
    {
        Hockey obj = new Hockey();
        obj.show();
        obj.play();
        //obj.start();
    }
}

// using input from user in Inheritance ClassNotFoundException

import java.util.*;
class Person {
    String name;
    int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public void displayInfo() {
        System.out.println("The Name is :" + name);
        System.out.println("The Age is :" + age);
    }
}

class Student extends Person {
    String rollNo;

    public Student(String name, int age, String rollNo) {
        super(name, age); 
        this.rollNo = rollNo;
    }

    public void displayStudentInfo() {
        displayInfo();
        System.out.println("The roll number is :" + rollNo);
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the Name :");
        String name = sc.nextLine();
        System.out.print("Enter the age :");
        int age = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter the roll number :");
        String rollNo = sc.nextLine();
        Student obj = new Student(name, age, rollNo);
        obj.displayStudentInfo(); 
        
    }
}

// interface

import java.util.*;
interface Shape
{
    void draw();
}
class Circle implements Shape
{
    public void draw()
    {
        System.out.println("Drawing the circle ");
    }
}
class Rectangle implements Shape
{
    public void draw()
    {
        System.out.println("Drawing the Rectangle ");
    }
}
class Main 
{
    public static void main(String[] args)
    {
        Shape c1 = new Circle();
        c1.draw();
        Shape ci1 = new Rectangle();
        ci1.draw();
    }
}

import java.util.*;
interface Event
{
    public void start();
}
interface Sports 
{
    public void play();
}
interface Hockey extends Sports,Event
{
    public void show();
}
public class Main 
{
    public static void main(String[] args)
    {
        Hockey obj = new Hockey()
        {
        public void start()
        {
            System.out.println("Start the event");
        }
         public void play()
        {
            System.out.println("Play the sports");
        }
         public void show()
        {
            System.out.println("Show the sprots event");
        }
        };
        obj.start();
        obj.play();
        obj.show();
    }
}


// Exception Handling

import java.util.*;
class Main 
{
    public static void main(String[] args)
    {
        
        try {
            Scanner sc = new Scanner(System.in);
            int a= sc.nextInt();
            int b = sc.nextInt();
            int c = a/b;
            System.out.println(c);
        } 
        catch(Exception e) 
        {
            System.out.println("Invalied Input ");
        }
        finally
        {
            System.out.println("Program excuted in sucessfully");
        }
        
    }
}

// Data Structure
// Linkedlist creation and display

import java.util.*;
class Node
{
    int data;
    Node next;
    public Node(int data)
    {
        this.data = data;
        this.next = null;
    }
}
class LinkedList
{
    Node head;
    Node tail;
    public void addNode(int data)
    {
        Node newNode = new Node(data);
        
        if(head == null)
        {
            head = newNode;
            tail = newNode;
        }
        else{
            tail.next = newNode;
            tail = newNode;
        }
    }
    void displayList()
    {
        Node CurrentNode = head;
        while(CurrentNode != null)
        {
            System.out.print(CurrentNode.data+" -> ");
            CurrentNode = CurrentNode.next;
        }
        System.out.println();
    }
}
class Main 
{
    public static void main(String[] args)
    {
        LinkedList obj = new LinkedList();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i=0;i<n;i++)
        {
         System.out.println("Enter the node :");
         int data = sc.nextInt();
         obj.addNode(data);
        }
        System.out.println("Linkedlist added after :");
        obj.displayList();
    }
}


// insertAtBeginning in linked list



import java.util.*;
class Node
{
    int data;
    Node next;
    public Node(int data)
    {
        this.data = data;
        this.next = null;
    }
}
class LinkedList
{
    Node head;
    Node tail;
    public void addNode(int data)
    {
        Node newNode = new Node(data);
        
        if(head == null)
        {
            head = newNode;
            tail = newNode;
        }
        else{
            newNode.next = head;
            head = newNode;
        }
    }
    void displayList()
    {
        Node CurrentNode = head;
        while(CurrentNode != null)
        {
            System.out.print(CurrentNode.data+" -> ");
            CurrentNode = CurrentNode.next;
        }
        System.out.println();
    }
}
class Main 
{
    public static void main(String[] args)
    {
        LinkedList obj = new LinkedList();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i=0;i<n;i++)
        {
         System.out.println("Enter the node :");
         int data = sc.nextInt();
         obj.addNode(data);
        }
        System.out.println("Linkedlist added after :");
        obj.displayList();
    }
}

// Insertion with middle


import java.util.*;
class Node
{
    int data;
    Node next;
    public Node(int data)
    {
        this.data = data;
        this.next = null;
    }
}
class LinkedList
{
    Node head;
    Node tail;
    public void addNode(int data,int pos)
    {
        Node newNode = new Node(data);
        
        if(head == null)
        {
            head = newNode;
            tail = newNode;
        }
        else if(pos == 0)
        {
            newNode.next = head;
            head = newNode;
        }
        else{
            Node currentNode = head;
            int ind = 0;
            while(currentNode.next != null && ind<pos-1)
            {
                currentNode= currentNode.next;
                ind++;
            }
            if(currentNode.next == null)
            {

                currentNode.next = newNode;
                tail = newNode;
            }
            else{
                newNode.next = currentNode.next;
                currentNode.next = newNode;
            }
        }
    }
    void displayList()
    {
        Node CurrentNode = head;
        while(CurrentNode != null)
        {
            System.out.print(CurrentNode.data+" -> ");
            CurrentNode = CurrentNode.next;
        }
        System.out.println();
    }
}
class Main 
{
    public static void main(String[] args)
    {
        LinkedList obj = new LinkedList();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i=0;i<n;i++)
        {
         System.out.println("Enter the node :");
         int data = sc.nextInt();
         System.out.println("Enter the position");
         int pos = sc.nextInt();
         obj.addNode(data,pos);
        }
        System.out.println("Linkedlist added after :");
        obj.displayList();
    }
}


// Deletion with Beginning


import java.util.*;
class Node
{
    int data;
    Node next;
    public Node(int data)
    {
        this.data = data;
        this.next = null;
    }
}
class LinkedList
{
    Node head;
    Node tail;
    public void deleteend()
    {
        Node temp = head;
        while(temp.next != tail)
        {
            temp = temp.next;
        }
        temp.next = null;
        tail = temp;
    }
    public void addNode(int data)
    {
        Node newNode = new Node(data);
        
        if(head == null)
        {
            head = newNode;
            tail = newNode;
        }
        else{
            newNode.next = head;
            head = newNode;
        }
    }
    void displayList()
    {
        Node CurrentNode = head;
        while(CurrentNode != null)
        {
            System.out.print(CurrentNode.data+" -> ");
            CurrentNode = CurrentNode.next;
        }
        System.out.println();
    }
}
class Main 
{
    public static void main(String[] args)
    {
        LinkedList obj = new LinkedList();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i=0;i<n;i++)
        {
         System.out.println("Enter the node :");
         int data = sc.nextInt();
         obj.addNode(data);
        }
        System.out.println("Linkedlist added after :");
        obj.displayList();
        
        obj.deleteend();
        
        System.out.println("Linkedlist Delete after :");
        obj.displayList();
    }
}


// Delete with middle


import java.util.*;
class Node
{
    int data;
    Node next;
    public Node(int data)
    {
        this.data = data;
        this.next = null;
    }
}
class LinkedList
{
    Node head;
    Node tail;
    void deletemiddle(int pos)
    {
        Node temp = head;
        int ind = 0;
        while(temp.next!=null && ind<pos-1)
        {
            temp = temp.next;
            ind++;
        }
        if(temp.next == null)
        {
            System.out.println("position out of bound :");
        }
        else{
            temp.next = temp.next.next;
            if(temp.next == null)
            {
                tail = temp;
            }
        }
    }
    void addNode(int data)
    {
        Node newNode = new Node(data);
        if(head == null)
        {
            head = newNode;
            tail = newNode;
        }
        else{
            tail.next = newNode;
            tail = newNode;
        }
    }
    void displayList()
    {
        Node CurrentNode = head;
        while(CurrentNode != null)
        {
            System.out.print(CurrentNode.data+" -> ");
            CurrentNode = CurrentNode.next;
        }
        System.out.println();
    }
}
class Main 
{
    public static void main(String[] args)
    {
        LinkedList obj = new LinkedList();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i=0;i<n;i++)
        {
         System.out.println("Enter the node :");
         int data = sc.nextInt();
         obj.addNode(data);
        }
        System.out.println("Linkedlist added after :");
        obj.displayList();
        
        System.out.println("Deleting node from trheb position");
        int pos = sc.nextInt();
        obj.deletemiddle(pos-1);
        
        System.out.println("Linkedlist added after :");
        obj.displayList();
    }
}

// Given singly linked list is empty or not 

import java.util.Scanner;


class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}


class LinkedList {
    Node head;
    Node tail;

    
    public void checkEmpty() {
        if (head == null) {
            System.out.println("The LinkedList is empty.");
        } else {
            System.out.println("The LinkedList is not empty.");
        }
    }

    public void addNode(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the number of nodes: ");
        int n = scanner.nextInt();

        for (int i = 0; i < n; i++) {
            System.out.println("Enter node  value: ");
            int data = scanner.nextInt();
            list.addNode(data);
        }

        list.checkEmpty();
    }
}

// Reverse a singly LinkedList


import java.util.*;
class Node
{
    int data;
    Node next;
    public Node(int data)
    {
        this.data = data;
        this.next = null;
    }
}
class LinkedList
{
    Node head;
    Node tail;
    public void addNode(int data)
    {
        Node newNode = new Node(data);
        
        if(head == null)
        {
            head = newNode;
            tail = newNode;
        }
        else{
            newNode.next = head;
            head = newNode;
        }
    }
    void displayList()
    {
        Node CurrentNode = head;
        while(CurrentNode != null)
        {
            System.out.print(CurrentNode.data+" -> ");
            CurrentNode = CurrentNode.next;
        }
        System.out.println();
    }
    void Reverse()
    {
        Node prev = null;
        Node temp = head;
        Node next = null;
        
        while(temp != null)
        {
           next = temp.next;
           temp.next = prev;
           prev = temp;
           temp = next;
        }
        Node current = head;
        head = tail;
        tail = temp;
    }
}
class Main 
{
    public static void main(String[] args)
    {
        LinkedList obj = new LinkedList();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i=0;i<n;i++)
        {
         System.out.println("Enter the node :");
         int data = sc.nextInt();
         obj.addNode(data);
        }
        System.out.println("Linkedlist added after :");
        obj.displayList();
        
        obj.Reverse();
        
        System.out.println("Reverse a Linkedlist  :");
        obj.displayList();
    }
}

// Remove duplicate in singly linked list


import java.util.*;
class Node
{
    int data;
    Node next;
    public Node(int data)
    {
        this.data = data;
        this.next = null;
    }
}
class LinkedList
{
    Node head;
    Node tail;
    public void addNode(int data)
    {
        Node newNode = new Node(data);
        
        if(head == null)
        {
            head = newNode;
            tail = newNode;
        }
        else{
            newNode.next = head;
            head = newNode;
        }
    }
    void displayList()
    {
        Node CurrentNode = head;
        while(CurrentNode != null)
        {
            System.out.print(CurrentNode.data+" -> ");
            CurrentNode = CurrentNode.next;
        }
        System.out.println();
    }
    void removeDuplicate()
    {
        Node temp = head;
        while(temp != null)
        {
            Node newnode = temp;
            while(newnode.next != null)
            {
                if(newnode.next.data == temp.data)
                {
                    newnode.next = newnode.next.next;
                    if(newnode.next == null)
                    {
                        tail = newnode;
                    }
                }
                else{
                    newnode = newnode.next;
                }
            }
            temp = temp.next;
        }
    }
}
class Main 
{
    public static void main(String[] args)
    {
        LinkedList obj = new LinkedList();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i=0;i<n;i++)
        {
         System.out.println("Enter the node :");
         int data = sc.nextInt();
         obj.addNode(data);
        }
        System.out.println("Linkedlist added after :");
        obj.displayList();
        
        obj.removeDuplicate();
        
        System.out.println("After remove duplicates :");
        obj.displayList();
    }
}

// Given linked list is sorted or not

import java.util.*;
class Node
{
    int data;
    Node next;
    public Node(int data)
    {
        this.data = data;
        this.next = null;
    }
}
class LinkedList
{
    Node head;
    Node tail;
    public void addNode(int data)
    {
        Node newNode = new Node(data);
        
        if(head == null)
        {
            head = newNode;
            tail = newNode;
        }
        else{
            newNode.next = head;
            head = newNode;
        }
    }
    void checkSorted()
    {
        Node temp = head;
        while(temp != null && temp.next != null)
        {
            if(temp.data > temp.next.data)
            {
                System.out.println("The LinkedList is not sorted. :");
                return;
            }
            temp = temp.next;
        }
        System.out.println("The LinkedList is sorted");
    }
}
class Main 
{
    public static void main(String[] args)
    {
        LinkedList obj = new LinkedList();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i=0;i<n;i++)
        {
         System.out.println("Enter the node :");
         int data = sc.nextInt();
         obj.addNode(data);
        }
        
        obj.checkSorted();
    }
}

// singly LinkedList is palindrome or not

import java.util.Scanner;
class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}
class LinkedList {
    Node head;
    Node tail;
    public void addNode(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
    }

    public void checkPalindrome() {
        
        Node firstHalfEnd = endOfFirstHalf();
        Node secondHalfStart = reverseList(firstHalfEnd.next);

        Node p1 = head;
        Node p2 = secondHalfStart;
        boolean isPalindrome = true;
        while (p2 != null) {
            if (p1.data != p2.data) {
                isPalindrome = false;
                break;
            }
            p1 = p1.next;
            p2 = p2.next;
        }

      
        firstHalfEnd.next = reverseList(secondHalfStart);
        if (isPalindrome) {
            System.out.println("The LinkedList is a palindrome.");
        } else {
            System.out.println("The LinkedList is not a palindrome.");
        }
    }

    private Node endOfFirstHalf() {
        Node slow = head;
        Node fast = head;
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    private Node reverseList(Node head) {
        Node previous = null;
        Node current = head;
        while (current != null) {
            Node nextTemp = current.next;
            current.next = previous;
            previous = current;
            current = nextTemp;
        }
        return previous;
    }

    public void printList() {
        Node currentNode = head;
        while (currentNode != null) {
            System.out.print(currentNode.data + " ");
            currentNode = currentNode.next;
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the number of nodes: ");
        int n = scanner.nextInt();

        for (int i = 0; i < n; i++) {
            System.out.println("Enter node " + (i + 1) + " value: ");
            int data = scanner.nextInt();
            list.addNode(data);
        }

        System.out.println("LinkedList: ");
        list.printList();

        list.checkPalindrome();

        scanner.close();
    }
}


// Merge the two list


class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    public void addNode(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            Node currentNode = head;
            while (currentNode.next != null) {
                currentNode = currentNode.next;
            }
            currentNode.next = newNode;
        }
    }

  
    public static Node mergeLists(Node head1, Node head2) {
        Node dummyNode = new Node(0);
        Node currentNode = dummyNode;

        while (head1 != null && head2 != null) {
            if (head1.data < head2.data) {
                currentNode.next = head1;
                head1 = head1.next;
            } else {
                currentNode.next = head2;
                head2 = head2.next;
            }
            currentNode = currentNode.next;
        }

        if (head1 != null) {
            currentNode.next = head1;
        } else {
            currentNode.next = head2;
        }

        return dummyNode.next;
    }

    public static void printList(Node head) {
        Node currentNode = head;
        while (currentNode != null) {
            System.out.print(currentNode.data + " ");
            currentNode = currentNode.next;
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list1 = new LinkedList();
        list1.addNode(1);
        list1.addNode(3);
        list1.addNode(5);

        LinkedList list2 = new LinkedList();
        list2.addNode(2);
        list2.addNode(4);
        list2.addNode(6);

        System.out.println("List 1: ");
        LinkedList.printList(list1.head);

        System.out.println("List 2: ");
        LinkedList.printList(list2.head);

        Node mergedHead = LinkedList.mergeLists(list1.head, list2.head);

        System.out.println("Merged List: ");
        LinkedList.printList(mergedHead);
    }
}

// Doubly LinkedList CREATION 

import java.util.*;
class Node
{
    int data;
    Node next;
    Node prev;
    
    public Node(int data)
    {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

class DoublylinkedList
{
    Node head;
    Node tail;
    
    public void addNode(int data)
    {
        Node newNode = new Node(data);
        if(head == null)
        {
            head = newNode;
            tail = newNode;
        }
        else{
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
    }
    void displayList()
    {
        Node temp = head;
        while(temp != null)
        {
            System.out.print(temp.data+" -> ");
            temp = temp.next;
        }
        System.out.println();
    }
    void reverseList()
    {
        Node temp = tail;
        while(temp != null)
        {
            System.out.print(temp.data+" -> ");
            temp = temp.prev;
        }
        System.out.println();
    }
}
class Main 
{
    public static void main(String[] args)
    {
        DoublylinkedList  dll = new DoublylinkedList();
        
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        for(int i=0;i<a;i++)
        {
            System.out.println("Enter the nodes :");
            int data = sc.nextInt();
            dll.addNode(data);
        }
        System.out.println(" The display the DLL");
        dll.displayList();
        
        dll.reverseList();
    }
}

// Doubly LinkedList insert with Beginning

import java.util.*;
class Node
{
    int data;
    Node next;
    Node prev;
    
    public Node(int data)
    {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

class DoublylinkedList
{
    Node head;
    Node tail;
    
    public void addNode(int data)
    {
        Node newNode = new Node(data);
        if(head == null)
        {
            head = newNode;
            tail = newNode;
        }
        else{
            newNode.next = head;
            head.prev = newNode;
            head = newNode;
        }
    }
    void displayList()
    {
        Node temp = head;
        while(temp != null)
        {
            System.out.print(temp.data+" -> ");
            temp = temp.next;
        }
        System.out.println();
    }
    void reverseList()
    {
        Node temp = tail;
        while(temp != null)
        {
            System.out.print(temp.data+" -> ");
            temp = temp.prev;
        }
        System.out.println();
    }
}
class Main 
{
    public static void main(String[] args)
    {
        DoublylinkedList  dll = new DoublylinkedList();
        
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        for(int i=0;i<a;i++)
        {
            System.out.println("Enter the nodes :");
            int data = sc.nextInt();
            dll.addNode(data);
        }
        System.out.println(" The display the DLL");
        dll.displayList();
        
        dll.reverseList();
    }
}

// Doubly LinkedList insertwith middle


import java.util.*;
class Node
{
    int data;
    Node next;
    Node prev;
    
    public Node(int data)
    {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

class DoublylinkedList
{
    Node head;
    Node tail;
    public void addNode(int data)
    {
        Node newNode = new Node(data);
        if(head == null)
        {
            head = newNode;
            tail = newNode;
        }
        else{
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
    }
    
    public void insertMid(int data,int pos)
    {
        Node newNode = new Node(data);
        if(head == null || pos == 0)
        {
            newNode.next = head;
            if(head != null)
            {
                head.prev = newNode;
            }
            else{
                tail = newNode;
            }
            head = newNode;
        }
        else{
            Node temp = head;
            int ind = 0;
            while(temp.next != null && ind<pos-1)
            {
                temp = temp.next;
                ind++;
            }
            if(temp.next == null)
            {
                temp.next = newNode;
                newNode.prev = temp;
                tail = newNode;
            }
            else{
                newNode.next = temp.next;
                newNode.prev = temp;
                temp.next.prev = newNode;
                temp.next = newNode;
            }
        }
        
    }
    void displayList()
    {
        Node temp = head;
        while(temp != null)
        {
            System.out.print(temp.data+" -> ");
            temp = temp.next;
        }
        System.out.println();
    }
    void reverseList()
    {
        Node temp = tail;
        while(temp != null)
        {
            System.out.print(temp.data+" -> ");
            temp = temp.prev;
        }
        System.out.println();
    }
}
class Main 
{
    public static void main(String[] args)
    {
        DoublylinkedList  dll = new DoublylinkedList();
        
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        for(int i=0;i<a;i++)
        {
            System.out.println("Enter the nodes :");
            int data = sc.nextInt();
            dll.addNode(data);
        }
        System.out.println(" The display the DLL");
        dll.displayList();
        
        int pos = sc.nextInt();
        System.out.println("Enter the value to insert at position :"+pos);
        int data = sc.nextInt();
        dll.insertMid(data,pos);
        System.out.println(" The display the DLL");
        dll.displayList();
        
        dll.reverseList();
    }
}

// Doubly LinkedList Deletion in Beginning



import java.util.*;
class Node
{
    int data;
    Node next;
    Node prev;
    
    public Node(int data)
    {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

class DoublylinkedList
{
    Node head;
    Node tail;
    public void addNode(int data)
    {
        Node newNode = new Node(data);
        if(head == null)
        {
            head = newNode;
            tail = newNode;
        }
        else{
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
    }
    void Deletebegin()
    {
        head = head.next;
        head.prev = null;
    }
    void displayList()
    {
        Node temp = head;
        while(temp != null)
        {
            System.out.print(temp.data+" -> ");
            temp = temp.next;
        }
        System.out.println();
    }
    void reverseList()
    {
        Node temp = tail;
        while(temp != null)
        {
            System.out.print(temp.data+" -> ");
            temp = temp.prev;
        }
        System.out.println();
    }
}
class Main 
{
    public static void main(String[] args)
    {
        DoublylinkedList  dll = new DoublylinkedList();
        
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        for(int i=0;i<a;i++)
        {
            System.out.println("Enter the nodes :");
            int data = sc.nextInt();
            dll.addNode(data);
        }
        System.out.println(" The display the DLL");
        dll.displayList();
        
        dll.Deletebegin();
        
        System.out.println(" The display the DLL");
        dll.displayList();
        
        dll.reverseList();
    }
}




// Doubly LinkedList Deletion in End



import java.util.*;
class Node
{
    int data;
    Node next;
    Node prev;
    
    public Node(int data)
    {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

class DoublylinkedList
{
    Node head;
    Node tail;
    public void addNode(int data)
    {
        Node newNode = new Node(data);
        if(head == null)
        {
            head = newNode;
            tail = newNode;
        }
        else{
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
    }
    void DeleteEnd()
    {
        tail = tail.prev;
        tail.next = null;
    }
    void displayList()
    {
        Node temp = head;
        while(temp != null)
        {
            System.out.print(temp.data+" -> ");
            temp = temp.next;
        }
        System.out.println();
    }
    void reverseList()
    {
        Node temp = tail;
        while(temp != null)
        {
            System.out.print(temp.data+" -> ");
            temp = temp.prev;
        }
        System.out.println();
    }
}
class Main 
{
    public static void main(String[] args)
    {
        DoublylinkedList  dll = new DoublylinkedList();
        
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        for(int i=0;i<a;i++)
        {
            System.out.println("Enter the nodes :");
            int data = sc.nextInt();
            dll.addNode(data);
        }
        System.out.println(" The display the DLL");
        dll.displayList();
        
        dll.DeleteEnd();
        
        System.out.println(" The display the DLL");
        dll.displayList();
        
        dll.reverseList();
    }
}


// Doubly LinkedList Deletion in middle



import java.util.*;
class Node
{
    int data;
    Node next;
    Node prev;
    
    public Node(int data)
    {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

class DoublylinkedList
{
    Node head;
    Node tail;
    public void addNode(int data)
    {
        Node newNode = new Node(data);
        if(head == null)
        {
            head = newNode;
            tail = newNode;
        }
        else{
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
    }
    void DeleteMiddle(int pos)
    {
        if(head == null)
        {
            System.out.println("List is empty");
            return;
        }
        if(pos == 1)
        {
            if(head == tail)
            {
                head = null;
                tail = null;
            }
            else{
                head = head.next;
                head.prev = null;
            }
            return;
        }
        Node temp = head;
        int ind = 0;
        while(temp.next != null && ind<pos-1)
        {
            temp = temp.next;
            ind++;
        }
        if(temp.next == null)
        {
            System.out.println("position exceeds the length of the list");
            return;
        }
        if(temp.next == tail)
        {
            tail = temp;
            tail.next = null;
        }
        else{
            temp.next = temp.next.next;
            temp.next.prev = temp;
        }
    }
    void displayList()
    {
        Node temp = head;
        while(temp != null)
        {
            System.out.print(temp.data+" -> ");
            temp = temp.next;
        }
        System.out.println();
    }
    void reverseList()
    {
        Node temp = tail;
        while(temp != null)
        {
            System.out.print(temp.data+" -> ");
            temp = temp.prev;
        }
        System.out.println();
    }
}
class Main 
{
    public static void main(String[] args)
    {
        DoublylinkedList  dll = new DoublylinkedList();
        
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        for(int i=0;i<a;i++)
        {
            System.out.println("Enter the nodes :");
            int data = sc.nextInt();
            dll.addNode(data);
        }
        System.out.println(" The display the DLL");
        dll.displayList();
        
        System.out.println("Enter the position to delete the node");
        int pos = sc.nextInt();
        dll.DeleteMiddle(pos);
        
        System.out.println(" DLL after DeleteMiddle :");
        dll.displayList();
        
        dll.reverseList();
    }
}


// Circular singly LinkedList creation and  display 

import java.util.*;
class Node 
{
    int data;
    Node next;
    public Node(int data)
    {
        this.data = data;
        this.next = null;
    }
}
class CircularLinkedlist 
{
    Node head;
    Node tail;
    
    void addNode(int data)
    {
        Node newNode = new Node(data);
        if(head == null)
        {
            head = newNode;
            tail = newNode;
            newNode.next = head;
        }
        else
        {
            tail.next = newNode;
            tail = newNode;
            tail.next = head;
        }
    }
    void displayList()
    {
        if(head == null)
        {
            System.out.println("List is empty");
            return;
        }
        Node temp = head;
        do 
        {
            System.out.print(temp.data+"->");
            temp = temp.next;
        } while(temp != head);
        System.out.println();
    }
}
class Main 
{
    public static void main(String[] args)
    {
        CircularLinkedlist csl = new CircularLinkedlist();
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        for(int i=0;i<a;i++)
        {
            System.out.println("Enter the nodes :");
            int data = sc.nextInt();
            csl.addNode(data);
        }
        System.out.println("CircularLinkedlist is display");
        csl.displayList();
    }
}

// Circular Doubly LinkedList creation and  display 

import java.util.*;
class  Node 
{
    int data;
    Node next;
    Node prev;
    Node(int data)
    {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}
class CircularLinkedlist 
{
    Node head;
    Node tail;
    
    void addNode(int data)
    {
        Node newNode = new Node(data);
        if(head == null)
        {
            head = newNode;
            tail = newNode;
            newNode.next = head;
            newNode.prev = tail;
        }
        else{
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
            tail.next = head;
            head.prev = tail;
        }
    }
    void displayListfor()
    {
        if(head == null)
        {
            System.out.println("List id Empty :");
            return;
        }
        Node temp = head;
        do 
        {
            System.out.print(temp.data+"->");
            temp = temp.next;
        }while(temp!=head);
        System.out.println();
    }
    void displayListback()
    {
        if(head == null)
        {
            System.out.println("List id Empty :");
            return;
        }
        Node temp = tail;
        do 
        {
            System.out.print(temp.data+"->");
            temp = temp.prev;
        }while(temp!=tail);
        System.out.println();
    }
}
public class Main 
{
    public static void main(String[] args)
    {
        CircularLinkedlist cdl = new CircularLinkedlist();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i=0;i<n;i++)
        {
            System.out.println("Enter the Nodes :");
            int data = sc.nextInt();
            cdl.addNode(data);
        }
        
        System.out.println("Display the CircularLinkedlist :");
        cdl.displayListfor();
        
        System.out.println("Display the CircularLinkedlist :");
        cdl.displayListback();
    }
}

// Array List 

import java.util.*;
class Main 
{
    public static void main(String[] args)
    {
        ArrayList<String> sc = new ArrayList<>();
        sc.add("KCT");
        sc.add("ECE");
        sc.add("CSECTION");
        System.out.println(sc);
        sc.add(2,"CSE");
        System.out.println(sc);
        sc.remove(3);
        System.out.println(sc);
        sc.add(3,"IT");
        System.out.println(sc);
        Collections.reverse(sc);
        System.out.println(sc);
    }
}


// Stack Creation 

import java.util.*;
class Main
{
    public static void main(String[] args)
    {
        Stack<Integer> st = new Stack<>();
        
        st.push(10);
        st.push(20);
        st.push(30);
        System.out.println(st);
        
        st.pop();
        System.out.println(st);
        
        st.peek();
        System.out.println(st);
    }
}

// stack Maximum and Minimum

import java.util.*;

public class Main {
    static Stack<Integer> stack = new Stack<>();
    static int max = Integer.MIN_VALUE;
    static int min = Integer.MAX_VALUE;

    public static void push(int x) {
        stack.push(x);
        if (x > max) {
            max = x;
        }
        if (x < min) {
            min = x;
        }
    }

    public static int pop() {
        int x = stack.pop();
        if (x == max) {
            max = findMax();
        }
        if (x == min) {
            min = findMin();
        }
        return x;
    }

    public static int findMax() {
        int max = Integer.MIN_VALUE;
        for (int x : stack) {
            if (x > max) {
                max = x;
            }
        }
        return max;
    }

    public static int findMin() {
        int min = Integer.MAX_VALUE;
        for (int x : stack) {
            if (x < min) {
                min = x;
            }
        }
        return min;
    }

    public static void main(String[] args) {
        push(10);
        push(20);
        push(30);

        pop();

        System.out.println("Max: " + max); 
        System.out.println("Min: " + min); 
    }
}


// Stack implementation in LinkedList

import java.util.*;
class Node 
{
    int data;
    Node next;
    Node(int data)
    {
        this.data = data;
        this.next = null;
    }
}
class StackLinkedList
{
    Node top;
    void push(int data)
    {
        Node newNode = new Node(data);
        if(top == null)
        {
            top = newNode;
        }
        else{
            newNode.next = top;
            top = newNode;
        }
    }
    void pop()
    {
        if(top == null)
        {
            System.out.println("Stack is empty");
        }
        else{
            System.out.println("Pop the elements :"+top.data);
            top = top.next;
        }
    }
    void peek()
    {
        if(top == null)
        {
            System.out.println("Stack is empty");
        }
        else{
            System.out.println("peek Element is :"+top.data);
        }
    }
    void display()
    {
        if(top == null)
        {
            System.out.println("Stack is empty");
        }
        else{
            Node temp = top;
            while(temp != null)
            {
                System.out.print(temp.data+"->");
                temp = temp.next;
            }
            System.out.println();
        }
    }
}
class Main 
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        StackLinkedList stl = new StackLinkedList();
        int n = sc.nextInt();
        for(int i=0;i<n;i++)
        {
            System.out.println("Enter the elements in the stack :");
            int data = sc.nextInt();
            stl.push(data);
        }
        System.out.println("After push the elements in the stack");
        stl.display();
        
        stl.pop();
        
        System.out.println("After pop the elements in the stack");
        stl.display();
        
        stl.pop();
        
        System.out.println("After pop the elements in the stack");
        stl.display();
        
        stl.peek();
        System.out.println("After peek the elements in the stack");
        stl.display();
        
        
    }
}

// INFIX TO POSTFIX

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter an infix expression: ");
        String infix = scanner.nextLine();
        String postfix = convertToPostfix(infix);
        System.out.println("Postfix expression: " + postfix);
    }

    public static String convertToPostfix(String infix) {
        Stack<Character> stack = new Stack<>();
        StringBuilder postfix = new StringBuilder();

        for (char c : infix.toCharArray()) {
            if (Character.isLetterOrDigit(c)) {
                postfix.append(c).append(" ");
            } else if (c == '(') {
                stack.push(c);
            } else if (c == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    postfix.append(stack.pop()).append(" ");
                }
                if (!stack.isEmpty() && stack.peek() == '(') {
                    stack.pop();
                }
            } else {
                while (!stack.isEmpty() && getPrecedence(stack.peek()) >= getPrecedence(c)) {
                    postfix.append(stack.pop()).append(" ");
                }
                stack.push(c);
            }
        }

        while (!stack.isEmpty()) {
            postfix.append(stack.pop()).append(" ");
        }

        return postfix.toString().trim();
    }

    public static int getPrecedence(char operator) {
        if (operator == '+' || operator == '-') {
            return 1;
        } else if (operator == '*' || operator == '/') {
            return 2;
        } else if (operator == '^') {
            return 3;
        } else {
            return 0;
        }
    }
}

// Queue using array

import java.util.*;
public class Queue
{
    int[] array;
    int front;
    int rear;
    int size;
    int capacity;
    public Queue(int capacity)
    {
        this.capacity = capacity;
        this.array = new int[capacity];
        this.front = 0;
        this.rear = -1;
        this.size = 0;
    }
    public boolean enqueue(int data)
    {
        if(isFull())
        {
            return false;
        }
        rear = (rear+1)%capacity;
        array[rear] = data;
        size++;
        return true;
    }
    public int dequeue()
    {
        if(isEmpty())
        {
            return -1;
        }
        int data = array[front];
        front = (front+1)%capacity;
        size--;
        return data;
    }
    public boolean isEmpty()
    {
        return size == 0;
    }
    public boolean isFull()
    {
        return size == capacity;
    }
    public int size()
    {
        return size;
    }
    public int peek()
    {
     if(isEmpty())
     {
         return -1;
     }
     return array[front];
    }
    public static void main(String[] args)
    {
        Queue qe = new Queue(5);
        System.out.println(qe.enqueue(10));
        System.out.println(qe.enqueue(20));
        System.out.println(qe.enqueue(30));
        
        System.out.println("Size of the Queue :"+qe.size());
        System.out.println("Front element is :"+qe.peek());
        
        System.out.println(qe.dequeue());
        System.out.println(qe.dequeue());
        System.out.println(qe.dequeue());
        
        System.out.println("Is Queue Empty?"+qe.isEmpty());

    }
    
}


// Queue using LinkedList

import java.util.*;
class Queue
{
    private Node front;
    private Node rear;
    private int size;
    
    private class Node
    {
        int data;
        Node next;
        public Node(int data)
        {
            this.data = data;
            this.next = null;
        }
    }
    public Queue()
    {
        front = null;
        rear = null;
        size = 0;
    }
    public void enqueue(int data)
    {
        Node newNode = new Node(data);
        if(rear == null)
        {
            front = newNode;
            rear = newNode;
        }
        else
        {
            rear.next = newNode;
            rear = newNode;
        }
        size++;
    }
    int dequeue()
    {
        if(isEmpty())
        {
            return -1;
        }
        int data = front.data;
        front = front.next;
        if(front == null)
        {
            rear = null;
        }
        size--;
        return data;
    }
    public boolean isEmpty()
    {
        return front == null;
    }
    public int size()
    {
        return size;
    }
    public int peek()
    {
        if(isEmpty())
        {
            return -1;
        }
        return front.data;
    }
    public static void main(String[] args)
    {
        Queue qe = new Queue();
        qe.enqueue(10);
        qe.enqueue(20);
        
        System.out.println("Size of the queue :"+qe.size());
        System.out.println("Front of the element in queue :"+qe.peek());
        
        System.out.println("Dequwued the element :"+qe.dequeue());
        
        System.out.println("Queue is empty? "+qe.isEmpty());
    }
}*/


    
    
    







/*#include<iostream>
using namespace std;
class Person
{
    private:
    string name;
    int age;
    
    public:
    Person(std::string name,int age)
    {
        this->name = name;
        this->age = age;
    }
    void display()
    {
        cout<<"Name is :"<<name<<endl;
        cout<<"Age is :"<<age<<endl;
    }
};
int main()
{
    Person obj("KCT",50);
    obj.display();
    return 0;
}

#include<iostream>
using namespace std;
class Animal
{
    public:
    void eat()
    {
        cout<<"The animal eat the food"<<endl;
    }
    void sleep()
    {
        cout<<"The animal sleep deply"<<endl;
    }
};
class Dog : public Animal
{
    public:
    void bark()
    {
        cout<<"The Dog is barking"<<endl;
    }
};
int main()
{
    Dog obj;
    obj.eat();
    obj.sleep();
    obj.bark();
    
    return 0;
}

// Data Structure
// Linkedlist creation and display


#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;

    Node(int data) {
        this->data = data;
        this->next = nullptr;
    }
};


class LinkedList {
public:
    Node* head;
    Node* tail;

    LinkedList() {
        head = nullptr;
        tail = nullptr;
    }

   
    void addNode(int data) {
        Node* newNode = new Node(data);
        if (head == nullptr) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    
    void displayList() {
        Node* currentNode = head;
        while (currentNode != nullptr) {
            cout << currentNode->data << "->";
            currentNode = currentNode->next;
        }
        cout << endl;
    }
};

int main() {
    LinkedList list;

    cout << "Enter the number of nodes: ";
    int n;
    cin >> n;

    for (int i = 0; i < n; i++) {
        cout << "Enter node " << endl;
        int data;
        cin >> data;
        list.addNode(data);
    }

    cout << "LinkedList: ";
    list.displayList();

    return 0;
}

// insertwith begining

#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;

    Node(int data) {
        this->data = data;
        this->next = nullptr;
    }
};


class LinkedList {
public:
    Node* head;
    Node* tail;

    LinkedList() {
        head = nullptr;
        tail = nullptr;
    }

   
    void addNode(int data) {
        Node* newNode = new Node(data);
        if (head == nullptr) {
            head = newNode;
            tail = newNode;
        } else {
            newNode->next = head;
            head = newNode;
        }
    }

    
    void displayList() {
        Node* currentNode = head;
        while (currentNode != nullptr) {
            cout << currentNode->data << "->";
            currentNode = currentNode->next;
        }
        cout << endl;
    }
};

int main() {
    LinkedList list;

    cout << "Enter the number of nodes: ";
    int n;
    cin >> n;

    for (int i = 0; i < n; i++) {
        cout << "Enter node " << endl;
        int data;
        cin >> data;
        list.addNode(data);
    }

    cout << "LinkedList: ";
    list.displayList();

    return 0;
}

// insertwith middle

#include <iostream>

struct Node {
    int data;
    Node* next;

    Node(int data) {
        this->data = data;
        this->next = nullptr;
    }
};

class LinkedList {
public:
    Node* head;
    Node* tail;

    LinkedList() {
        head = nullptr;
        tail = nullptr;
    }

    
    void insertAtMiddle(int data, int position) {
        Node* newNode = new Node(data);
        if (head == nullptr) {
            head = newNode;
            tail = newNode;
        } else if (position == 0) {
            newNode->next = head;
            head = newNode;
        } else {
            Node* currentNode = head;
            int currentIndex = 0;
            while (currentNode->next != nullptr && currentIndex < position - 1) {
                currentNode = currentNode->next;
                currentIndex++;
            }
            if (currentNode->next == nullptr) {
                currentNode->next = newNode;
                tail = newNode;
            } else {
                newNode->next = currentNode->next;
                currentNode->next = newNode;
            }
        }
    }

    
    void displayList() {
        Node* currentNode = head;
        while (currentNode != nullptr) {
            std::cout << currentNode->data << " ";
            currentNode = currentNode->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    LinkedList list;

    int n;
    std::cout << "Enter the number of nodes: ";
    std::cin >> n;

    for (int i = 0; i < n; i++) {
        int data;
        std::cout << "Enter node " << (i + 1) << " value: ";
        std::cin >> data;

        int position;
        std::cout << "Enter position for node " << (i + 1) << ": ";
        std::cin >> position;

        list.insertAtMiddle(data, position);
    }

    std::cout << "LinkedList: ";
    list.displayList();

    return 0;
}


// Deletion with begining and end


#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;

    Node(int data) {
        this->data = data;
        this->next = nullptr;
    }
};


class LinkedList {
public:
    Node* head;
    Node* tail;

    LinkedList() {
        head = nullptr;
        tail = nullptr;
    }
     
     void deletebegin()
     {
         head = head->next;
     }
     void deleteend()
     {
         Node* temp = head;
         while(temp->next != tail)
         {
             temp = temp->next;
         }
         temp->next = nullptr;
         temp = tail;
     }

    void addNode(int data) {
        Node* newNode = new Node(data);
        if (head == nullptr) {
            head = newNode;
            tail = newNode;
        } else {
            newNode->next = head;
            head = newNode;
        }
    }

    
    void displayList() {
        Node* currentNode = head;
        while (currentNode != nullptr) {
            cout << currentNode->data << "->";
            currentNode = currentNode->next;
        }
        cout << endl;
    }
};

int main() {
    LinkedList list;

    cout << "Enter the number of nodes: ";
    int n;
    cin >> n;

    for (int i = 0; i < n; i++) {
        cout << "Enter node " << endl;
        int data;
        cin >> data;
        list.addNode(data);
    }

    cout << "LinkedList: ";
    list.displayList();
    
    list.deletebegin();
    
    cout<<"After Delting the list "<<endl;
    list.displayList();
    
    list.deleteend();
    
    cout<<"After Delting the list "<<endl;
    list.displayList();

    return 0;
}

// Doubly LinkedList insert with begining and end


#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node* prev;

    Node(int data) {
        this->data = data;
        this->next = nullptr;
        this->prev = nullptr;
    }
};


class LinkedList {
public:
    Node* head;
    Node* tail;

    LinkedList() {
        head = nullptr;
        tail = nullptr;
    }

   
    void insertBegin(int data) {
        Node* newNode = new Node(data);
        if (head == nullptr) {
            head = newNode;
            tail = newNode;
        } else {
            newNode->next = head;
            head->prev = newNode;
            head = newNode;
        }
    }
    void insertEnd(int data)
    {
        Node* newNode = new Node(data);
        if(head == nullptr)
        {
            head = newNode;
            tail = newNode;
        }
        else
        {
            tail->next = newNode;
            tail = newNode;
            newNode->prev = tail;
        }
    }

    
    void displayList() {
        Node* currentNode = head;
        while (currentNode != nullptr) {
            cout << currentNode->data << "->";
            currentNode = currentNode->next;
        }
        cout << endl;
    }
};

int main() {
    LinkedList list;

    cout << "Enter the number of nodes: ";
    int n;
    cin >> n;

    for (int i = 0; i < n; i++) {
        cout << "Enter node \n" << endl;
        int data;
        cin >> data;
        list.insertBegin(data);
        list.insertEnd(data);
    }
    cout << "LinkedList: "<<endl;
    list.displayList();

    return 0;
}*/

// Doubly LinkedList delete with begining and end


#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node* prev;

    Node(int data) 
    {
        this->data = data;
        this->next = nullptr;
        this->prev = nullptr;
    }
};


class LinkedList {
public:
    Node* head;
    Node* tail;

    LinkedList() {
        head = nullptr;
        tail = nullptr;
    }

   
    void deleteBegin() 
    {
        head = head->next;
        head->prev = nullptr;
    }
    void deleteEnd()
    {
        tail = tail->prev;
        tail->next = nullptr;
    }

  void addNode(int data) {
        Node* newNode = new Node(data);
        if (head == nullptr) {
            head = newNode;
            tail = newNode;
        } else {
            newNode->next = head;
            head = newNode;
        }
  }
    
    void displayList() {
        Node* currentNode = head;
        while (currentNode != nullptr) {
            cout << currentNode->data << "->";
            currentNode = currentNode->next;
        }
        cout << endl;
    }
    
};

int main() {
    LinkedList list;

    cout << "Enter the number of nodes: ";
    int n;
    cin >> n;

    for (int i = 0; i < n; i++) {
        cout << "Enter node " << endl;
        int data;
        cin >> data;
        list.addNode(data);
    }

    cout << "LinkedList: ";
    list.displayList();
    
    list.deleteBegin();
    
    cout<<"After Delting the list "<<endl;
    list.displayList();
    
    list.deleteEnd();
    
    cout<<"After Delting the list "<<endl;
    list.displayList();
    
   // list.reverse();

    return 0;
}
























